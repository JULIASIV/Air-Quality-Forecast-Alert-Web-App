version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6
    container_name: air-quality-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: air-quality-app
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - air-quality-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: air-quality-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - air-quality-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: air-quality-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password123}@mongodb:27017/air-quality-app?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      NASA_API_KEY: ${NASA_API_KEY}
      EARTHDATA_USERNAME: ${EARTHDATA_USERNAME}
      EARTHDATA_PASSWORD: ${EARTHDATA_PASSWORD}
      OPENAQ_API_KEY: ${OPENAQ_API_KEY}
      OPENWEATHERMAP_API_KEY: ${OPENWEATHERMAP_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      AQI_UNHEALTHY_SENSITIVE_THRESHOLD: ${AQI_UNHEALTHY_SENSITIVE_THRESHOLD:-101}
      AQI_UNHEALTHY_THRESHOLD: ${AQI_UNHEALTHY_THRESHOLD:-151}
      AQI_VERY_UNHEALTHY_THRESHOLD: ${AQI_VERY_UNHEALTHY_THRESHOLD:-201}
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./server/logs:/app/logs
    networks:
      - air-quality-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: air-quality-frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
      VITE_WEBSOCKET_URL: ws://localhost:3001
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - air-quality-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: air-quality-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - air-quality-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: air-quality-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - air-quality-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: air-quality-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - air-quality-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  air-quality-network:
    driver: bridge
